pipeline {
    agent any
  
    environment {
        KUBE_CONFIG_PATH_NA = credentials('kube-na')
        KUBE_CONFIG_PATH_EU = credentials('kub-eu')
    }
  
    stages {
        stage('Integrate with Source k8s (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.51.87') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                    sh './kubectl get pods'
                    sh './kubectl get services'
                }
            }
        }
    
        stage('Modify Deployment YAML for Migration') {
            steps {
                script {
                    // Appel du script Python pour modifier le YAML
                    def inputYaml = 'deployment.yaml'
                    def outputYaml = 'deployment_modified.yaml'
                    def nodeParam = 'gke-cluster-eu-default-pool-a69f98b2-7b7j' // Nouveau nom de nœud

                    // Assurez-vous que le script Python est accessible depuis Jenkins
                    sh "python3 mig.py ${inputYaml} ${outputYaml} ${nodeParam}"

                    // Archivage du fichier modifié pour utilisation ultérieure
                    archiveArtifacts artifacts: 'deployment_modified.yaml', allowEmptyArchive: true
                }
            }
        }
    
        stage('Integrate with Destination k8s (EU)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                }
            }
        }
    
        stage('Migrate Deployment and Service to Destination (EU)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    // Assurez-vous que les fichiers sont disponibles avant de les appliquer
                    sh 'ls -l deployment_modified.yaml service.yaml'
                    
                    // Appliquer les fichiers YAML modifiés
                    sh './kubectl apply -f deployment_modified.yaml'
                    sh './kubectl apply -f service.yaml'
                }
            }
        }
      stage('Delete Old Deployment and Service from Source (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.51.87') {
                    script {
                        // Supprimer les anciens déploiements
                        def deployments = sh(script: "./kubectl get deployments --no-headers -o custom-columns=\":metadata.name\" | grep '^podmigration-testapp'", returnStdout: true).trim()
                        deployments.split('\n').each { deployment ->
                            sh "./kubectl delete deployment ${deployment}"
                        }
                        
                        // Supprimer les anciens services
                        def services = sh(script: "./kubectl get services --no-headers -o custom-columns=\":metadata.name\" | grep '^podmigration-testapp'", returnStdout: true).trim()
                        services.split('\n').each { service ->
                            sh "./kubectl delete service ${service}"
                        }
                    }
                }
            }
        }
        stage('Delete Old Deployment and Service from Source (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.51.87') {
                    script {
                        // Supprimer les anciens déploiements
                        def deployments = sh(script: "./kubectl get deployments --no-headers -o custom-columns=\":metadata.name\" | grep '^podmigration-testapp'", returnStdout: true).trim()
                        deployments.split('\n').each { deployment ->
                            sh "./kubectl delete deployment ${deployment}"
                        }
                        
                        // Supprimer les anciens services
                        def services = sh(script: "./kubectl get services --no-headers -o custom-columns=\":metadata.name\" | grep '^podmigration-testapp'", returnStdout: true).trim()
                        services.split('\n').each { service ->
                            sh "./kubectl delete service ${service}"
                        }
                    }
                }
            }
        }
    }
}
