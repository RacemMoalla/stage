pipeline {
    agent any

    environment {
        KUBE_CONFIG_PATH_EU = credentials('kub-eu')
        KUBE_CONFIG_PATH_NA = credentials('kube-na')
    }

    stages {
        stage('Integrate with Source k8s (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.19.109') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                    sh './kubectl get pods'
                    sh './kubectl get services'
                }
            }
        }
    
        stage('Export Deployment and Service from Source (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.19.109') {
                    sh './kubectl get deployment decision-service -o yaml > deployment.yaml'
                    sh './kubectl get service decision-service -o yaml > service.yaml'
                    archiveArtifacts artifacts: 'deployment.yaml, service.yaml', allowEmptyArchive: true
                }
            }
        }
    
        stage('Modify Deployment YAML for Migration') {
            steps {
                script {
                    // Appel du script Python pour modifier le YAML
                    def inputYaml = 'deployment.yaml'
                    def outputYaml = 'deployment_modified.yaml'
                    def nodeParam = ' gke-eur-cluster-default-pool-b14a7988-c8gr' // Nouveau nom de nœud en eu

                    sh "python3 mig.py ${inputYaml} ${outputYaml} ${nodeParam}"

                    // Archivage du fichier modifié pour utilisation ultérieure
                    archiveArtifacts artifacts: 'deployment_modified.yaml', allowEmptyArchive: true
                }
            }
        }
    
        stage('Integrate with Destination k8s (eu)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.234.23') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                }
            }
        }
    
        stage('Migrate Deployment and Service to Destination (eu)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.234.23') {
                    sh 'ls -l deployment_modified.yaml service.yaml'
                    // Appliquer les fichiers YAML modifiés
                    sh './kubectl apply -f deployment_modified.yaml --force'
                    sh './kubectl apply -f service.yaml --force'
                }
            }
        }

        stage('Retrieve External IP and Update via API') {
            steps {
                script {
                    def externalIP = ''
                    def attempts = 0
                    def maxAttempts = 5
                    def sleepTime = 30 // seconds

                    while (externalIP == '' && attempts < maxAttempts) {
                        withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.234.23') {
                            // Retrieve external IP of decision-service
                            externalIP = sh(script: './kubectl get service decision-service -o=jsonpath="{.status.loadBalancer.ingress[0].ip}"', returnStdout: true).trim()
                            echo "External IP of decision-service: ${externalIP}"
                        }

                        if (externalIP == '' || externalIP=='') {
                            echo "Waiting for external IP to be assigned..."
                            sleep sleepTime
                            attempts++
                            sleepTime =2
                            
                        }
                    }

                    if (externalIP != null && externalIP != '') {
                        def apiUrl = "http://34.163.222.120:3000/update-cluster-ip"
                        def payload = "{\"updatedIP\": \"${externalIP}\", \"apply_delay\": \"0\"}" // Modifier apply_delay à 1

                        // Effectuer l'appel API avec curl
                        sh "curl -X POST ${apiUrl} -H 'Content-Type: application/json' -d '${payload}'"
                    } else {
                        error "Failed to retrieve external IP after ${maxAttempts} attempts"
                    }
                }
            }
        }

        stage('Delete Old Deployment and Service from Source (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.19.109') {
                    // Supprimer les anciens déploiement et service
                    sh './kubectl delete deployment decision-service'
                    sh './kubectl delete service decision-service'
                }
            }
        }
    }
    post {
        success {
            script {
                // Générer un délai de sommeil aléatoire entre 100 et 300 secondes
            def random = new Random()
            def sleepTime = 200 + random.nextInt(301) // 200 + (0-300) = 200-400

            // Afficher le délai de sommeil
            echo "Sleeping for ${sleepTime} seconds before triggering 'charge node' job."

            // Attendre le délai généré
            sleep(time: 60, unit: 'SECONDS')

            // Déclencher le job suivant
            build job: 'charge node'
            }
        }
    }
}
