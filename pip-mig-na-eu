pipeline {
    agent any
  
    environment {
        KUBE_CONFIG_PATH_EU = credentials('kub-eu')
        KUBE_CONFIG_PATH_NA = credentials('kube-na')
    }
  
    stages {
        stage('Integrate with Source k8s (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.88.143') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                    sh './kubectl get pods'
                    sh './kubectl get services'
                }
            }
        }
    
        stage('Export Deployment and Service from Source (NA)') {
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.88.143') {
                    sh './kubectl get deployment decision-service -o yaml > deployment.yaml'
                    sh './kubectl get service decision-service -o yaml > service.yaml'
                    archiveArtifacts artifacts: 'deployment.yaml, service.yaml', allowEmptyArchive: true
                }
            }
        }
    
        stage('Modify Deployment YAML for Migration') {
            steps {
                script {
                    // Appel du script Python pour modifier le YAML
                    def inputYaml = 'deployment.yaml'
                    def outputYaml = 'deployment_modified.yaml'
                    def nodeParam = 'gke-cluster-eu-default-pool-7871b70a-h76h' // Nouveau nom de nœud en eu

                    sh "python3 mig.py ${inputYaml} ${outputYaml} ${nodeParam}"

                    // Archivage du fichier modifié pour utilisation ultérieure
                    archiveArtifacts artifacts: 'deployment_modified.yaml', allowEmptyArchive: true
                }
            }
        }
    
        stage('Integrate with Destination k8s (eu)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.163.69.101') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                }
            }
        }
    
        stage('Migrate Deployment and Service to Destination (eu)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.163.69.101') {
                    sh 'ls -l deployment_modified.yaml service.yaml'
                    // Appliquer les fichiers YAML modifiés
                    sh './kubectl apply -f deployment_modified.yaml'
                    sh './kubectl apply -f service.yaml'
                }
            }
        }



  stage('Delete Old Deployment and Service from Source (EU)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.163.69.101') {
                    // Supprimer les anciens déploiement et service
                    sh './kubectl delete deployment podmigration-testapp'
                    sh './kubectl delete service podmigration-testapp-service'
                }
            }
        }
    }
}
