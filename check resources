pipeline {
    agent any

    environment {
        KUBE_CONFIG_PATH_EU = credentials('kub-eu')
        KUBE_CONFIG_PATH_NA = credentials('kube-na')
    }

    stages {
        stage('Integrate with Source k8s (EU)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                    sh './kubectl get pods'
                    sh './kubectl get services'
                }
            }
        }

        stage('Check Resource Usage and Trigger Migration') {
            steps {
                script {
                    def usageExceeded = checkResourceUsage()

                    if (usageExceeded) {
                        env.TRIGGER_MIGRATION = 'true'
                    }
                }
            }
        }

        stage('Export Deployment and Service from Source (EU)') {
            when {
                expression { env.TRIGGER_MIGRATION == 'true' }
            }
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    sh './kubectl get deployment podmigration-testapp -o yaml > deployment.yaml'
                    sh './kubectl get service podmigration-testapp-service -o yaml > service.yaml'
                    archiveArtifacts artifacts: 'deployment.yaml, service.yaml', allowEmptyArchive: true
                }
            }
        }

        stage('Modify Deployment YAML for Migration') {
            when {
                expression { env.TRIGGER_MIGRATION == 'true' }
            }
            steps {
                script {
                    // Appel du script Python pour modifier le YAML
                    def inputYaml = 'deployment.yaml'
                    def outputYaml = 'deployment_modified.yaml'
                    def nodeParam = 'gke-cluster-na-default-pool-a0083f06-2htb' // Nouveau nom de nœud en NA

                    // Assurez-vous que le script Python est accessible depuis Jenkins
                    sh "python3 mig.py ${inputYaml} ${outputYaml} ${nodeParam}"

                    // Archivage du fichier modifié pour utilisation ultérieure
                    archiveArtifacts artifacts: 'deployment_modified.yaml', allowEmptyArchive: true
                }
            }
        }

        stage('Integrate with Destination k8s (NA)') {
            when {
                expression { env.TRIGGER_MIGRATION == 'true' }
            }
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.51.87') {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
                    sh 'chmod u+x ./kubectl'
                    sh './kubectl get nodes'
                }
            }
        }

        stage('Migrate Deployment and Service to Destination (NA)') {
            when {
                expression { env.TRIGGER_MIGRATION == 'true' }
            }
            steps {
                withKubeConfig(credentialsId: 'kube-na', caCertificate: '', serverUrl: 'https://34.130.51.87') {
                    // Assurez-vous que les fichiers sont disponibles avant de les appliquer
                    sh 'ls -l deployment_modified.yaml service.yaml'

                    // Appliquer les fichiers YAML modifiés
                    sh './kubectl apply -f deployment_modified.yaml'
                    sh './kubectl apply -f service.yaml'
                }
            }
        }

        stage('Delete Old Deployment and Service from Source (EU)') {
            when {
                expression { env.TRIGGER_MIGRATION == 'true' }
            }
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    // Supprimer les anciens déploiement et service
                    sh './kubectl delete deployment podmigration-testapp'
                    sh './kubectl delete service podmigration-testapp-service'
                }
            }
        }
    }

    post {
        always {
            node('') {
                script {
                    if (env.TRIGGER_MIGRATION == 'true') {
                        echo 'Migration triggered due to resource usage exceeding thresholds.'
                    } else {
                        echo 'No migration triggered.'
                    }
                }
            }
        }
    }
}

def checkResourceUsage() {
    while (true) {
        // Vérification toutes les 1 minute
        sleep time: 60, unit: 'SECONDS'

        def usageExceeded = false

        withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
            def resourceStatus = sh(script: './kubectl top pods', returnStdout: true).trim()
            println(resourceStatus)

            def lines = resourceStatus.split('\n')
            lines.each { line ->
                def parts = line.split()
                if (parts[0] != 'NAME' && parts.size() >= 4) {
                    def cpuUsage = parts[1].replace('%','').toInteger()
                    def memoryUsage = parts[2].replace('%','').toInteger()
                    println "Pod ${parts[0]}: CPU Usage = ${cpuUsage}%, Memory Usage = ${memoryUsage}%"
                    if (cpuUsage > 80 || memoryUsage > 80) {
                        usageExceeded = true
                    }
                }
            }
        }

        if (usageExceeded) {
            return true
        }
    }

    return false
}
