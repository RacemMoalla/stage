pipeline {
    agent any

    environment {
        KUBE_CONFIG_PATH_EU = credentials('kub-eu')
    }

    parameters {
        string(name: 'POD_NAME', defaultValue: 'podmigration-testapp-66996bf55-mjxdh', description: 'Nom du pod à migrer')
        string(name: 'NAMESPACE', defaultValue: 'default', description: 'Namespace du pod')
        string(name: 'TARGET_NODE', defaultValue: '', description: 'Nœud de destination pour la migration')
    }

    stages {
        stage('Integrate with k8s (EU)') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    sh '''
                        # Download and set up kubectl
                        curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"
                        chmod u+x ./kubectl
                        ./kubectl version --client
                        ./kubectl get nodes

                        # Check if the pod exists
                        ./kubectl get pod podmigration-testapp-66996bf55-mjxdh -n default

                        # Export deployment and service YAML
                        ./kubectl get deployment podmigration-testapp -n default -o yaml > deployment.yaml
                        ./kubectl get service podmigration-testapp-service -n default -o yaml > service.yaml
                    '''
                }
            }
        }

        stage('Verify Pod Exists') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                script {
                    def podExists = sh(script: "./kubectl get pod ${params.POD_NAME} -n ${params.NAMESPACE} || echo 'PodNotFound'", returnStdout: true).trim()
                    if (podExists == 'PodNotFound') {
                        error "Pod ${params.POD_NAME} not found in namespace ${params.NAMESPACE}"
                    } else {
                        echo "Pod ${params.POD_NAME} found in namespace ${params.NAMESPACE}"
                    }
                }
                }
            }
        }

  

        stage('Modify Deployment YAML for Node Migration') {
            steps {
                script {
                    // Appel du script Python pour modifier le YAML
                    def inputYaml = 'deployment.yaml'
                    def outputYaml = 'deployment_modified.yaml'
                    def nodeParam = params.TARGET_NODE // Utiliser le nœud cible spécifié par l'utilisateur

                    // Assurez-vous que le script Python est accessible depuis Jenkins
                    sh "python3 mig.py ${inputYaml} ${outputYaml} ${nodeParam}"

                    // Archivage du fichier modifié pour utilisation ultérieure
                    archiveArtifacts artifacts: 'deployment_modified.yaml', allowEmptyArchive: true
                }
            }
        }

        stage('Apply Modified Deployment') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    // Assurez-vous que les fichiers sont disponibles avant de les appliquer
                    sh 'ls -l deployment_modified.yaml service.yaml'

                    // Appliquer les fichiers YAML modifiés
                    sh '''
                        #!/bin/bash
                        ./kubectl apply -f deployment_modified.yaml
                        ./kubectl apply -f service.yaml
                    '''
                }
            }
        }

        stage('Cleanup Old Pods') {
            steps {
                withKubeConfig(credentialsId: 'kub-eu', caCertificate: '', serverUrl: 'https://34.155.30.68') {
                    // Supprimer les anciens pods pour qu'ils soient recréés sur le nouveau nœud
                    sh "./kubectl delete pod ${params.POD_NAME} -n ${params.NAMESPACE}"
                }
            }
        }
    }
}
